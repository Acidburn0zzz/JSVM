$package("js.awt");js.awt.GridLayout = function (def) {var CLASS = js.awt.GridLayout, thi$ = CLASS.prototype;if (CLASS.__defined__) {this._init.apply(this, arguments);return;}CLASS.__defined__ = true;var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System;thi$.layoutContainer = function (container) {var bounds = container.getBounds(), MBP = bounds.MBP, grid = this.grid, items = container.items0(), comp, constraints, rIdx, cIdx, cell, x, y, w, h, compz;grid.layout(MBP.paddingLeft, MBP.paddingTop, bounds.innerWidth, bounds.innerHeight);for (var i = 0, len = items.length; i < len; i++) {comp = container[items[i]];if (!comp.isVisible()) {continue;}constraints = comp.def.constraints;cell = grid.cell(constraints.rowIndex, constraints.colIndex);if (cell && cell.visible) {compz = comp.getPreferredSize();x = cell.x + cell.paddingLeft;y = cell.y + cell.paddingTop;if (comp.isRigidWidth()) {x += (cell.innerWidth - compz.width) * comp.getAlignmentX();w = compz.width;} else {w = cell.innerWidth;}if (comp.isRigidHeight()) {y += (cell.innerHeight - compz.height) * comp.getAlignmentY();h = compz.height;} else {h = cell.innerHeight;}comp.setBounds(x, y, w, h, 3);} else {comp.display(false);}}}.$override(this.layoutContainer);thi$._init = function (def) {def = def || {};def.classType = "js.awt.GridLayout";arguments.callee.__super__.apply(this, arguments);this.grid = new (Class.forName("js.awt.Grid"))(def);}.$override(this._init);this._init.apply(this, arguments);}.$extend(js.awt.AbstractLayout);