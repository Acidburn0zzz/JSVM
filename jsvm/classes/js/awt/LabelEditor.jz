$package("js.awt");js.awt.LabelEditor = function (label, listener) {var CLASS = js.awt.LabelEditor, thi$ = CLASS.prototype;if (CLASS.__defined__) {this._init.apply(this, arguments);return;}CLASS.__defined__ = true;var Class = js.lang.Class, Event = js.util.Event, DOM = J$VM.DOM, System = J$VM.System, MQ = J$VM.MQ;var styles = ["position", "top", "left", "font-family", "font-size", "font-style", "font-weight", "text-decoration", "text-align", "font-weight", "color", "background-color", "padding-top", "padding-right", "padding-bottom", "padding-left", "border-top-width", "border-right-width", "border-bottom-width", "border-left-width", "border-top-style", "border-right-style", "border-bottom-style", "border-left-style", "border-top-color", "border-right-color", "border-bottom-style", "border-left-color"];thi$.doEdit = function () {var input = this.input = DOM.createElement("INPUT"), label = this.label;input.type = "text";input.style.cssText = "outline:none;display:none";DOM.insertBefore(input, label);DOM.applyStyles(input, DOM.getStyles(label, styles));DOM.setSize(input, label.offsetWidth, label.offsetHeight);if (J$VM.ie) {DOM.applyStyles(input, {lineHeight:DOM.getStyle(label, "line-height")});}input.value = this.text;input.style.display = "block";input.focus();label.style.display = "none";Event.attachEvent(input, "blur", 0, this, _onblur);Event.attachEvent(input, "keydown", 0, this, _onkeydown);Event.attachEvent(input, "mousedown", 0, this, _oninputmsdown);Event.detachEvent(document, Event.W3C_EVT_SELECTSTART, 1);};var _onblur = function (e) {_doChange.call(this);return e.cancelDefault();};var _onkeydown = function (e) {var c = e.keyCode;if (c == 13) {_doChange.call(this);}return true;};var _oninputmsdown = function (e) {e.cancelBubble();};var _doChange = function () {if (this.input.value != this.text) {var label = this.label, recvs = [];if (this.listener) {recvs.push(this.listener.uuid());}MQ.post("js.awt.event.LabelEditorEvent", new Event("changed", {label:label, text:this.input.value}, this), recvs);}DOM.forbidSelect(this.input);DOM.remove(this.input, true);delete this.input;this.label.style.display = "block";delete this.label;delete this.text;};thi$._init = function (label, listener) {arguments.callee.__super__.apply(this, arguments);this.listener = listener;this.label = label;this.text = js.lang.String.decodeHtml(label.innerHTML);}.$override(this._init);this._init.apply(this, arguments);}.$extend(js.util.EventTarget);