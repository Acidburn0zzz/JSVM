$package("js.sql");$import("js.sql.ResultSetMetaData");js.sql.ResultSet = function () {var CLASS = js.sql.ResultSet, thi$ = CLASS.prototype;if (CLASS.__defined__) {return;}CLASS.__defined__ = true;var Class = js.lang.Class, System = J$VM.System, SQLTypes = Class.forName("js.sql.Types");thi$.setMetaData = function (metaData) {if (!(metaData instanceof js.sql.ResultSetMetaData)) {throw "SQLException: metaData is not an " + "instance of js.sql.ResultSetMetaData";}this.metaData = metaData;};thi$.getMetaData = function () {return this.metaData;};thi$.findColumn = function (columnName) {var metaData = this.getMetaData(), col = metaData.findColumn(columnName);if (col) {return col.colIndex;}throw "SQLException: Can't found column [" + columnName + "]";};thi$.getRowCount = function () {return 0;};thi$.isBeforeFirst = function () {return this.cursor === 0;};thi$.isFirst = function () {return this.cursor === 1;};thi$.isAfterLast = function () {return this.cursor > this.getRowCount();};thi$.isLast = function () {return this.cursor === this.getRowCount();};thi$.beforeFirst = function () {this.absolute(0);};thi$.afterLast = function () {this.absolute(this.getRowCount() + 1);};thi$.first = function () {return this.absolute(1);};thi$.last = function () {return this.absolute(-1);};thi$.next = function () {return this.relative(1);};thi$.previous = function () {return this.relative(-1);};thi$.absolute = function (row) {var rowNum = this.getRowCount(), ret = false;if (row < 0) {row = rowNum + row + 1;this.cursor = row > 0 ? row : 0;ret = (this.cursor > 0);} else {if (row == 0) {this.cursor = 0;} else {if (row > 0) {this.cursor = row > rowNum ? rowNum + 1 : row;ret = (this.cursor <= rowNum);}}}return ret;};thi$.relative = function (rows) {return this.absolute(this.cursor + rows);};thi$.getRow = function () {var cursor = this.cursor;return (cursor < 1 || cursor > this.getRowCount()) ? 0 : cursor;};thi$.getValue = function (columnIndex) {};thi$.updateValue = function (columnIndex, value) {};thi$.deleteRow = function () {};thi$.insertRow = function (values) {};thi$.updateRow = function (values) {};thi$.close = function () {};};