$package("js.sql");js.sql.ResultSetMetaData = function (def) {var CLASS = js.sql.ResultSetMetaData, thi$ = CLASS.prototype;if (CLASS.__defined__) {this._init.apply(this, arguments);return;}CLASS.__defined__ = true;var Class = js.lang.Class, System = J$VM.System, SQLTypes = Class.forName("js.sql.Types");thi$.getColumnCount = function () {return this.colNum;};thi$.isAutoIncrement = function (column) {_checkRange(column);return this.cols[column].autoIncrement || false;};thi$.isCaseSensitive = function (column) {_checkRange(column);return this.cols[column].caseSensitive || false;};thi$.isSearchable = function (column) {_checkRange(column);return this.cols[column].searchable || false;};thi$.isCurrency = function (column) {_checkRange(column);return this.cols[column].currency || false;};thi$.isNullable = function (column) {_checkRange(column);return this.cols[column].nullability || CLASS.columnNoNulls;};thi$.columnNoNulls = 0;thi$.columnNullable = 1;thi$.columnNullableUnknown = 2;thi$.isSigned = function (column) {_checkRange(column);return this.cols[column].signed || false;};thi$.getColumnDisplaySize = function (column) {_checkRange(column);return this.cols[column].displaysize || 80;};thi$.getColumnLabel = function (column) {_checkRange(column);var col = this.cols[column];return col.dname || col.name || "";};thi$.getColumnName = function (column) {_checkRange(column);return this.cols[column].name;};thi$.getSchemaName = function (column) {_checkRange(column);return this.cols[column].schema;};thi$.getPrecision = function (column) {_checkRange(column);return this.cols[column].precision || 0;};thi$.getScale = function (column) {_checkRange(column);return this.cols[column].scale || 0;};thi$.getTableName = function (column) {_checkRange(column);return this.cols[column].table;};thi$.getCatalogName = function (column) {_checkRange(column);return this.cols[column].catalog;};thi$.getColumnType = function (column) {_checkRange(column);return this.cols[column].sql;};thi$.getColumnTypeName = function (column) {_checkRange(column);var col = this.cols[column];return col.sqlType || SQLTypes.getNameBySql(col.sql);};thi$.isReadOnly = function (column) {_checkRange(column);return this.cols[column].readOnly || false;};thi$.isWritable = function (column) {return !this.isReadOnly(column);};thi$.isDefinitelyWritable = function (column) {throw "SQLException: ";};thi$.getColumnClassName = function (column) {_checkRange(column);return this.cols[column].classType;};var _checkRange = function (index) {if (!Class.isNumber(index) || index < 1 || index > this.colNum) {throw "SQLException: Column index " + index + " is out of range";}};thi$.findColumn = function (columnName) {return this.colMap[columnName];};thi$.destroy = function () {this.cols = null;delete this.cols;}.$override(this.destroy);thi$._init = function (def) {if (def == undefined) {return;}var R = js.lang.Math;var colNum = this.colNum = Class.isNumber(def.colNum) ? def.colNum : 0, cols = this.cols = new Array(colNum + 1), columns = def.cols || [], colDef, colMap = this.colMap = {};for (var i = 0; i < colNum; i++) {colDef = columns[i] || {name:"col" + i, sql:SQLTypes.CHAR};colDef = cols[i + 1] = System.objectCopy(colDef, {}, true);colDef.colIndex = i + 1;colDef.uuid = R.uuid();colMap[colDef.name] = colDef.colIndex;}};this._init.apply(this, arguments);}.$extend(js.lang.Object);