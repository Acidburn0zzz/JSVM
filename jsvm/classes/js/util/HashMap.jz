$package("js.util");$import("js.util.LinkedList");js.util.HashMap = function (map) {var CLASS = js.util.HashMap, thi$ = CLASS.prototype;if (CLASS.__defined__) {this._init.apply(this, arguments);return;}CLASS.__defined__ = true;var Class = js.lang.Class;thi$.put = function (key, value) {if (!Class.isString(key) && !Class.isNumber(key)) {throw "The key must be a string or number";}this._vals[key] = value;if (!this._keys.contains(key)) {this._keys.addLast(key);}};thi$.size = function () {return this._keys.length;};thi$.contains = function (key) {return this._keys.contains(key);};thi$.get = function (key) {return this._vals[key];};thi$.remove = function (key) {var e;this._keys.remove(key);e = this._vals[key];delete this._vals[key];return e;};thi$.keys = function () {var ret = [], keys = this._keys;for (var i = 0, len = keys.length; i < len; i++) {ret.push(keys[i]);}return ret;};thi$.values = function () {var ret = [], keys = this._keys, vals = this._vals;for (var i = 0, len = keys.length; i < len; i++) {ret.push(vals[keys[i]]);}return ret;};thi$.addAll = function (map) {for (var p in map) {this.put(p, map[p]);}};thi$.clear = function () {this._vals = {};this._keys = js.util.LinkedList.newInstance();};thi$._init = function (map) {this._vals = map || {};this._keys = js.util.LinkedList.newInstance();var _keys = this._keys, _vals = this._vals;for (var p in _vals) {if (_vals.hasOwnProperty(p)) {_keys.push(p);}}};this._init.apply(this, arguments);}.$extend(js.lang.Object);