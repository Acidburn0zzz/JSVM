$package("js.util");js.util.Messenger = function () {var Q, running = false;this.register = function (msgId, receiver, handler) {var recvs = this.table[msgId];if (recvs === undefined) {recvs = js.util.LinkedList.newInstance([]);this.table[msgId] = recvs;}var recv = new js.util.EventListener(receiver, handler);if (!recvs.contains(recv)) {recvs.push(recv);}};this.cancel = function (msgId, receiver, handler) {var recvs = this.table[msgId];if (recvs === undefined) {return;}var recv = new js.util.EventListener(receiver, handler);var p = recvs.indexOf(recv);if (p != -1) {recvs.remove0(p);if (recvs.length === 0) {delete this.table[msgId];}}};this.remove = function (receiverId) {var indexOf = function (list, id) {for (var i = 0, len = list.length; i < len; i++) {if (list[i].uuid() === id) {return i;}}return -1;};var table = this.table, recvs, idx, p;for (p in table) {recvs = table[p];while ((idx = indexOf(recvs, receiverId)) != -1) {recvs.remove0(idx);}if (recvs.length == 0) {delete this.table[p];}}};this.post = function (msgId, msgData, recvs, device, priority) {var msg = [msgId, msgData, js.lang.Class.typeOf(recvs) === "array" ? recvs : [], device === undefined ? null : device, priority === 0 ? 0 : (priority === 1 ? 1 : 1)];Q[msg[4]].push(msg);if (!running) {_schedule();}};var _schedule = function () {if (Q.isEmpty()) {running = false;} else {running = true;_dispatch.$delay(this, 0);}}.$bind(this);var _dispatch = function () {var msg = Q.get();if (js.lang.Class.typeOf(msg) != "array") {_schedule();return;}var device = msg[3], g, recvs = this.table[msg[0]], recv;if (device != null) {msg[3] = null;if (J$VM.env.j$vm_isworker) {device.postMessage(JSON.stringify(msg));} else {device.postMessage(JSON.stringify(msg), "*");}} else {if (recvs != undefined && recvs.length > 0) {for (var i = 0, len = msg[2].length; i < len; i++) {if (g === undefined) {g = {};}g[msg[2][i]] = true;}for (i = 0, len = recvs.length; i < len; i++) {recv = recvs[i];if (g != undefined) {if (g[recv.uuid()]) {recv.handleEvent.$delay(recv, 0, msg[1]);}} else {recv.handleEvent.$delay(recv, 0, msg[1]);}}}}_schedule();}.$bind(this);this.send = function (msgId, msgData, rcvs, device, priority) {priority = priority === 0 ? 0 : (priority === 1 ? 1 : 1), device = device === undefined ? null : device, rcvs = js.lang.Class.typeOf(rcvs) === "array" ? rcvs : [];var recvs = this.table[msgId], recv, g;if (device != null) {if (J$VM.env.j$vm_isworker) {device.postMessage(JSON.stringify([priority, null, rcvs, msgId, msgData]));} else {device.postMessage(JSON.stringify([priority, null, rcvs, msgId, msgData]), "*");}} else {if (recvs != undefined && recvs.length > 0) {for (var i = 0, len = rcvs.length; i < len; i++) {if (g === undefined) {g = {};}g[rcvs[i]] = true;}for (i = 0, len = recvs.length; i < len; i++) {recv = recvs[i];if (g != undefined) {if (g[recv.uuid()]) {recv.handleEvent(msgData);}} else {recv.handleEvent(msgData);}}}}};var _init = function () {this.table = {};Q = [[], []];Q.isEmpty = function () {return (this[0].length + this[1].length) == 0;};Q.get = function () {var o = this[0].shift();o = (o === undefined) ? this[1].shift() : o;return o;};_schedule();}.call(this);}.$extend(js.lang.Object);